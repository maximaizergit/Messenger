<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Друзья</title>
    <style>
      .full-height {
        min-height: 90vh;
      }
      .chat-wrapper {
        border: 2px solid black;
        padding: 0 !important;
      }
      .add-friends-wrapper {
        border-bottom: 2px solid black;
        padding: 0 !important;
     
        max-height: 60vh;
        min-height: 0vh;
        margin-bottom: 0px;
        overflow:auto;
        width: 100%;
        overflow-x: hidden;
      }
      .chat {
        height: 75px;
      }
     
      .chat img {
        width: 70px;
        height: 70px;
      }
      .chat {
        border-top: 1px solid gray;
        border-bottom: 1px solid gray;
        height: max-content;
      }
      .sender-name {
        font-size: 24px;
      }
      .menu-item{
          flex-shrink: 0;
          padding: 10px;
      }
      .side-menu{
        height: min-content;
      }
     @media screen and (max-width: 1150px) {
  .side-block{
   
    display: none;
  }
  .add-friends-wrapper{
    border-left: 0;
    border-right: 0;
  }
  .chat-wrapper{
    border-left: 0;
    border-right: 0;
    border-bottom: 0;
  }

}



  .grid-block{
     display: grid;
  grid-template-columns: 90px auto;
  grid-template-rows: auto auto;
 
  min-height: 70px; 
  overflow: hidden;
  }
  .profile-pic{
    grid-column: 1 ; 
  grid-row: 1/ span 2;
 
    display: flex;
  align-items: center;
  
  justify-content: center;
  }
  .profile-pic img{
     width: 70px;
  height: 70px;
  }
  .username{
    align-items: left;
    grid-column: 2;
  grid-row:1;
  }
  .buttons-wrapper{
    grid-column: 2;
  grid-row:2;

  }
  .buttons-wrapper a{
    margin-right: 5px;
  
  }
  .container-fluid a:hover{
    text-decoration: none;
  }
  

    </style>
  </head>

  <body>
    <link
      rel="stylesheet"
      href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
    />

    <nav class="navbar navbar-expand-lg navbar-light bg-light align-top">
      <a class="navbar-brand" href="#">NovaChat</a>
      <button
        class="navbar-toggler"
        type="button"
        data-toggle="collapse"
        data-target="#navbarNav"
        aria-controls="navbarNav"
        aria-expanded="false"
        aria-label="Toggle navigation"
      >
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav">
          <li class="nav-item">
            <a class="nav-link" href="/">Сообщения</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/friends">Друзья</a>
          </li>
        </ul>
      </div>
    </nav>

    <div class="container-fluid">
      <div class="row">
        <div class="col-md-2 side-block">
          <!-- Пустая колонка -->
        </div>
        <div class="col-md-2 side-menu side-block">
          <!-- Колонка с меню -->
          <div class="list-group">
            <a href="/" class="list-group-item list-group-item-action"
              >Сообщения</a
            >
            <a href="#" class="list-group-item list-group-item-action active"
              >Друзья</a
            >
            <!-- Добавьте дополнительные ссылки в меню, если необходимо -->
          </div>
        </div>
        <div class="col-md-4 chat-wrapper full-height">
          <!-- Колонка с контейнером для чатов -->
       
          <div class="chat-container">
             <div class=" add-friends-wrapper">
<div class="message-input d-flex align-items-center">
                <div class="menu-item">Добавить друга</div>
            <input
              id="search-input"
              type="text"
              class="form-control mr-2"
              placeholder="Введите имя пользователя"
            />
          <button id="search-button" class="btn btn-primary">Поиск</button>
         
        </div>
         <div class="row mt-2">

           <div class="col-1 p-0"></div>   
    <div class="col-3 p-1">
      <button id="requests-button" class="btn btn-primary btn-block">Заявки</button>
    </div>
    <div class="col-5 p-1">
      <button id="my-requests-button" class="btn btn-primary btn-block">Мои запросы</button>
    </div>
    <div class="col-2 p-1">
      <button id="close-button" class="btn btn-danger btn-block">X</button>
    </div>
    <div class="col-1 p-0"></div> 
        
  </div>
            
          </div>
             
            <% friends.forEach(function(friend) { %>
            <div class="container-fluid chat">
              <div class="grid-block">
              <div class="profile-pic">  <img src="tempphoto.png" /></div>
              <div class="username"><%= friend.name %></div>
              <div class="buttons-wrapper">
                <a href="chat/<%= friend.id %>">
                  <button
                    class="btn btn-primary"
                    data-friend-id="<%= friend.id %>"
                  >
                    Написать
                  </button>
                </a>
                <button
                    class="btn btn-warning"
                    id="delete-friend"
                    data-friend-id="<%= friend.id %>"
                  >
                    Удалить из друзей
                  </button>
              </div>
            </div>
            </div>
            <% }); %>
            
          </div>
        </div>

        <div class="col-md-3 side-block">
         
       
      </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>

      const chatWrapper = document.querySelector('.chat-wrapper');
const mediaQuery = window.matchMedia('(max-width: 1150px)');

function handleMediaQuery(event) {
  if (event.matches) {
    chatWrapper.classList.remove('col-md-4');
    chatWrapper.classList.add('col-md-12');
  } else {
    chatWrapper.classList.remove('col-md-12');
    chatWrapper.classList.add('col-md-4');
  }
}

mediaQuery.addEventListener('change', handleMediaQuery);
handleMediaQuery(mediaQuery);

      // Подключение к серверу Socket.IO
      const socket = io();
      socket.on("notification", (message) => {});
      const resultsContainer = document.querySelector(".add-friends-wrapper");
      $(document).ready(function () {
        // Обработка клика на кнопку "Отправить"
        $("#search-button").click(function () {
         
          var name = $("#search-input").val();
          console.log('req'); 
           socket.emit("searchUser", name);

        });

     $("#requests-button").click(function () {
           socket.emit("getRequests");
        });

          $("#my-requests-button").click(function () {
           socket.emit("getSentRequests");
        });
      $("#close-button").click(function () {
       const containerId = "search-results";
  const existingContainers = document.querySelectorAll(`#${containerId}`);
  

existingContainers.forEach((container) => {
    container.remove();
  });
        });

      $("#delete-friend").click(function() {
  var friendId = $(this).data("friend-id");
  var container = $(this).closest(".container-fluid.chat"); // Сохраняем ссылку на контейнер

  $.ajax({
    url: `/delete-friend/${friendId}`,
    method: "POST",
    success: function(response) {
      console.log("Success");
      container.hide(); // Используем сохраненную ссылку на контейнер
    },
    error: function(error) {
      console.log("Error:", error);
    },
  });
});
        socket.on("friendRequests", (requests) => {
// Удаление существующих контейнеров с указанным идентификатором
  const containerId = "search-results";
  const existingContainers = document.querySelectorAll(`#${containerId}`);
  

existingContainers.forEach((container) => {
    container.remove();
  });
  requests.forEach((user) => {
    const container = document.createElement('div');
  container.className = 'container-fluid chat';
container.id = containerId;
  const gridBlock = document.createElement('div');
  gridBlock.className = 'grid-block';

  const profilePic = document.createElement('div');
  profilePic.className = 'profile-pic';

  const img = document.createElement('img');
  img.src = 'tempphoto.png';

  profilePic.appendChild(img);

  const username = document.createElement('div');
  username.className = 'username';
  username.textContent = user.name;

  const buttonsWrapper = document.createElement('div');
  buttonsWrapper.className = 'buttons-wrapper';

  const link = document.createElement('a');
   const link2 = document.createElement('a');

  const button = document.createElement('button');
  button.className = 'btn btn-primary';
  button.setAttribute('data-friend-id', user.id);
  button.textContent = 'Добавить в друзья';
  
 const button2 = document.createElement('button');
  button2.className = 'btn btn-warning';
  button2.setAttribute('data-friend-id', user.id);
  button2.textContent = 'Отклонить';
 

  link.appendChild(button);
  link2.appendChild(button2);
  buttonsWrapper.appendChild(link);
  buttonsWrapper.appendChild(link2);

  gridBlock.appendChild(profilePic);
  gridBlock.appendChild(username);
  gridBlock.appendChild(buttonsWrapper);

  container.appendChild(gridBlock);
  resultsContainer.appendChild(container);
        });
т
         // Добавить обработчик события click к каждой кнопке
  const addFriendButtons = document.querySelectorAll(`#${containerId} .btn-primary[data-friend-id]`);
  addFriendButtons.forEach((button) => {
    button.addEventListener("click", function (event) {
      event.preventDefault();
      // Получить идентификатор друга из атрибута data-friend-id
      const friendId = this.getAttribute("data-friend-id");
      console.log(friendId);

      // Выполнить действия, которые вам нужны при клике на кнопку
      // Например, отправить запрос на сервер для добавления друга

      // Пример запроса на сервер с использованием jQuery AJAX
      $.ajax({
        
        url: `/add-friend/${friendId}`,
        method: "POST",
        // Дополнительные параметры запроса, если необходимо
        success: function (response) {
          // Обработать успешный ответ от сервера
          console.log("Success");
        },
        error: function (error) {
          // Обработать ошибку, если есть
          console.log("Error:", error);
        },
      });
    });
  });
   
  
      });


socket.on("friendRequestsSent", (requests) => {
// Удаление существующих контейнеров с указанным идентификатором
  const containerId = "search-results";
  const existingContainers = document.querySelectorAll(`#${containerId}`);
  

existingContainers.forEach((container) => {
    container.remove();
  });
  requests.forEach((user) => {
    const container = document.createElement('div');
  container.className = 'container-fluid chat';
  container.id = containerId;

  const gridBlock = document.createElement('div');
  gridBlock.className = 'grid-block';

  const profilePic = document.createElement('div');
  profilePic.className = 'profile-pic';

  const img = document.createElement('img');
  img.src = 'tempphoto.png';

  profilePic.appendChild(img);

  const username = document.createElement('div');
  username.className = 'username';
  username.textContent = user.name;

  const buttonsWrapper = document.createElement('div');
  buttonsWrapper.className = 'buttons-wrapper';

  const link = document.createElement('a');
  link.href = `chat/${user.id}`;

  const button = document.createElement('button');
  button.className = 'btn btn-primary';
  button.setAttribute('data-friend-id', user.id);
  button.textContent = 'Добавить в друзья';

  link.appendChild(button);
  buttonsWrapper.appendChild(link);

  gridBlock.appendChild(profilePic);
  gridBlock.appendChild(username);
  gridBlock.appendChild(buttonsWrapper);

  container.appendChild(gridBlock);
  resultsContainer.appendChild(container);
        });

         // Добавить обработчик события click к каждой кнопке
  const addFriendButtons = document.querySelectorAll(`#${containerId} .btn-primary[data-friend-id]`);
  addFriendButtons.forEach((button) => {
    button.addEventListener("click", function (event) {
      event.preventDefault();
      // Получить идентификатор друга из атрибута data-friend-id
      const friendId = this.getAttribute("data-friend-id");
      console.log(friendId);

      // Выполнить действия, которые вам нужны при клике на кнопку
      // Например, отправить запрос на сервер для добавления друга

      // Пример запроса на сервер с использованием jQuery AJAX
      $.ajax({
        
        url: `/add-friend/${friendId}`,
        method: "POST",
        // Дополнительные параметры запроса, если необходимо
        success: function (response) {
          // Обработать успешный ответ от сервера
          console.log("Success");
        },
        error: function (error) {
          // Обработать ошибку, если есть
          console.log("Error:", error);
        },
      });
    });
  });
   
  
      });


 socket.on("searchResult", (userNames) => {
  console.log('res');
  const containerId = "search-results";

  // Удаление существующих контейнеров с указанным идентификатором
  const existingContainers = document.querySelectorAll(`#${containerId}`);
  existingContainers.forEach((container) => {
    container.remove();
  });

  userNames.forEach((user) => {
     const container = document.createElement('div');
  container.className = 'container-fluid chat';
container.id = containerId;

  const gridBlock = document.createElement('div');
  gridBlock.className = 'grid-block';

  const profilePic = document.createElement('div');
  profilePic.className = 'profile-pic';

  const img = document.createElement('img');
  img.src = 'tempphoto.png';

  profilePic.appendChild(img);

  const username = document.createElement('div');
  username.className = 'username';
  username.textContent = user.name;

  const buttonsWrapper = document.createElement('div');
  buttonsWrapper.className = 'buttons-wrapper';

  const link = document.createElement('a');
  link.href = `chat/${user.id}`;

  const button = document.createElement('button');
  button.className = 'btn btn-primary';
  button.setAttribute('data-friend-id', user.id);
  button.textContent = 'Добавить в друзья';

  link.appendChild(button);
  buttonsWrapper.appendChild(link);

  gridBlock.appendChild(profilePic);
  gridBlock.appendChild(username);
  gridBlock.appendChild(buttonsWrapper);

  container.appendChild(gridBlock);
  resultsContainer.appendChild(container);
  });
  // Добавить обработчик события click к каждой кнопке
  const addFriendButtons = document.querySelectorAll(`#${containerId} .btn-primary[data-friend-id]`);
  addFriendButtons.forEach((button) => {
    button.addEventListener("click", function (event) {
      event.preventDefault();
      // Получить идентификатор друга из атрибута data-friend-id
      const friendId = this.getAttribute("data-friend-id");
      console.log(friendId);

    

      // Пример запроса на сервер с использованием jQuery AJAX
      $.ajax({
        
        url: `/add-friend/${friendId}`,
        method: "POST",
        // Дополнительные параметры запроса, если необходимо
        success: function (response) {
          // Обработать успешный ответ от сервера
          console.log("Success");
        },
        error: function (error) {
          // Обработать ошибку, если есть
          console.log("Error:", error);
        },
      });
    });
  });
 });
 
 
});




      
    </script>
  </body>
</html>
